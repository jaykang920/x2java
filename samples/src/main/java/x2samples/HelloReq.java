// auto-generated by x2java xpiler

package x2samples;

import java.io.IOException;
import java.util.*;

import x2java.*;
import x2java.util.*;

public class HelloReq extends Event {
    protected static Tag tag;

    private String name_;

    public String getName() {
        return name_;
    }
    public HelloReq setName(String value) {
        fingerprint.touch(tag.getOffset() + 0);
        name_ = value;
        return this;
    }

    static {
        tag = new Tag(Event.tag, HelloReq.class, 1, 1);
    }

    public HelloReq() {
        super(tag.getNumProps());
        init();
    }

    protected HelloReq(int length) {
        super(length + tag.getNumProps());
        init();
    }

    private void init() {
        name_ = "";
    }

    @Override
    protected boolean equalsTo(Cell other) {
        if (!super.equalsTo(other)) {
            return false;
        }
        HelloReq o = (HelloReq)other;
        if (name_ != o.name_) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode(Fingerprint fingerprint) {
        Hash hash = new Hash(super.hashCode(fingerprint));
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            hash.update(name_);
        }
        return hash.code();
    }

    @Override
    protected boolean isEquivalent(Cell other, Fingerprint fingerprint) {
        if (!super.isEquivalent(other, fingerprint)) {
            return false;
        }
        HelloReq o = (HelloReq)other;
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            if (name_ != o.name_) {
                return false;
            }
        }
        return true;
    }

    @Override
    public Cell.Tag _getTypeTag() { return tag; }

    @Override
    public int _getTypeId() { return tag.getTypeId(); }

    @Override
    protected void describe(StringBuilder sb) {
        super.describe(sb);
        sb.append(" Name: ");
        sb.append(name_);
    }

    // Serialization

    @Override
    public void deserialize(Deserializer deserializer) throws IOException {
        super.deserialize(deserializer);
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            name_ = deserializer.readString();
        }
    }

    @Override
    public int length() {
        int length = super.length();
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            length += Serializer.lengthString(name_);
        }
        return length;
    }

    @Override
    public void serialize(Serializer serializer) {
        super.serialize(serializer);
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            serializer.writeString(name_);
        }
    }
}
