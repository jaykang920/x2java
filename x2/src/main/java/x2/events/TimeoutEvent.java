// auto-generated by x2java xpiler

package x2;

import java.io.IOException;
import java.util.*;

import x2.*;
import x2.util.*;

public class TimeoutEvent extends Event {
    protected static Tag tag;

    private Object key_;
    private int intParam_;

    public Object getKey() {
        return key_;
    }
    public TimeoutEvent setKey(Object value) {
        fingerprint.touch(tag.getOffset() + 0);
        key_ = value;
        return this;
    }

    public int getIntParam() {
        return intParam_;
    }
    public TimeoutEvent setIntParam(int value) {
        fingerprint.touch(tag.getOffset() + 1);
        intParam_ = value;
        return this;
    }

    static {
        tag = new Tag(Event.tag, TimeoutEvent.class, 2, BuiltinEventType.TimeoutEvent);
    }

    public TimeoutEvent() {
        super(tag.getNumProps());
    }

    protected TimeoutEvent(int length) {
        super(length + tag.getNumProps());
    }

    @Override
    protected boolean equalsTo(Cell other) {
        if (!super.equalsTo(other)) {
            return false;
        }
        TimeoutEvent o = (TimeoutEvent)other;
        if (key_ != o.key_) {
            return false;
        }
        if (intParam_ != o.intParam_) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode(Fingerprint fingerprint) {
        Hash hash = new Hash(super.hashCode(fingerprint));
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            hash.update(key_);
        }
        if (touched.get(1)) {
            hash.update(intParam_);
        }
        return hash.code();
    }

    @Override
    protected boolean isEquivalent(Cell other, Fingerprint fingerprint) {
        if (!super.isEquivalent(other, fingerprint)) {
            return false;
        }
        TimeoutEvent o = (TimeoutEvent)other;
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            if (key_ != o.key_) {
                return false;
            }
        }
        if (touched.get(1)) {
            if (intParam_ != o.intParam_) {
                return false;
            }
        }
        return true;
    }

    @Override
    public Cell.Tag _getTypeTag() { return tag; }

    @Override
    public int _getTypeId() { return tag.getTypeId(); }

    @Override
    protected void describe(StringBuilder sb) {
        super.describe(sb);
        sb.append(" Key: ");
        sb.append(key_);
        sb.append(", IntParam: ");
        sb.append(intParam_);
    }
}
