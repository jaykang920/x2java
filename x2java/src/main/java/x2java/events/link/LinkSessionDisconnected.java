// auto-generated by x2java xpiler

package x2java;

import java.io.IOException;
import java.util.*;

import x2java.*;
import x2java.util.*;

public class LinkSessionDisconnected extends Event {
    protected static Tag tag;

    private String linkName_;
    private int handle_;
    private Object context_;

    public String getLinkName() {
        return linkName_;
    }
    public LinkSessionDisconnected setLinkName(String value) {
        fingerprint.touch(tag.getOffset() + 0);
        linkName_ = value;
        return this;
    }

    public int getHandle() {
        return handle_;
    }
    public LinkSessionDisconnected setHandle(int value) {
        fingerprint.touch(tag.getOffset() + 1);
        handle_ = value;
        return this;
    }

    public Object getContext() {
        return context_;
    }
    public LinkSessionDisconnected setContext(Object value) {
        fingerprint.touch(tag.getOffset() + 2);
        context_ = value;
        return this;
    }

    static {
        tag = new Tag(Event.tag, LinkSessionDisconnected.class, 3, LinkEventType.LinkSessionDisconnected);
    }

    public LinkSessionDisconnected() {
        super(tag.getNumProps());
    }

    protected LinkSessionDisconnected(int length) {
        super(length + tag.getNumProps());
    }

    @Override
    protected boolean equalsTo(Cell other) {
        if (!super.equalsTo(other)) {
            return false;
        }
        LinkSessionDisconnected o = (LinkSessionDisconnected)other;
        if (linkName_ != o.linkName_) {
            return false;
        }
        if (handle_ != o.handle_) {
            return false;
        }
        if (context_ != o.context_) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode(Fingerprint fingerprint) {
        Hash hash = new Hash(super.hashCode(fingerprint));
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            hash.update(linkName_);
        }
        if (touched.get(1)) {
            hash.update(handle_);
        }
        if (touched.get(2)) {
            hash.update(context_);
        }
        return hash.code();
    }

    @Override
    protected boolean isEquivalent(Cell other, Fingerprint fingerprint) {
        if (!super.isEquivalent(other, fingerprint)) {
            return false;
        }
        LinkSessionDisconnected o = (LinkSessionDisconnected)other;
        Capo touched = fingerprint.capo(tag.getOffset());
        if (touched.get(0)) {
            if (linkName_ != o.linkName_) {
                return false;
            }
        }
        if (touched.get(1)) {
            if (handle_ != o.handle_) {
                return false;
            }
        }
        if (touched.get(2)) {
            if (context_ != o.context_) {
                return false;
            }
        }
        return true;
    }

    @Override
    public Cell.Tag _getTypeTag() { return tag; }

    @Override
    public int _getTypeId() { return tag.getTypeId(); }

    @Override
    protected void describe(StringBuilder sb) {
        super.describe(sb);
        sb.append(" LinkName: ");
        sb.append(linkName_);
        sb.append(", Handle: ");
        sb.append(handle_);
        sb.append(", Context: ");
        sb.append(context_);
    }
}
