// Copyright (c) 2016 Jae-jun Kang
// See the file LICENSE for details.

package xpiler;

import java.io.*;
import java.util.*;

class JavaFormatter implements Formatter {
    private static final String extension = ".java";
    private static final String description = "Java";

    public boolean format(Document doc, String outDir) {
        PrintStream out = null;
        try {
            String targetName = PathUtil.join(outDir,
                                              doc.baseName + extension);
            File target = new File(targetName);
            out = new PrintStream(new FileOutputStream(target));
            Context context = new Context();
            context.out = out;
            context.doc = doc;
            formatHeader(context);
            formatBody(context);
        } catch (Exception e) {
            System.out.format("error: %s\n", e.getMessage());
            return false;
        } finally {
            try {
                out.close();
            } catch (Exception e) {}
        }
        return true;
    }
  
    private void formatHeader(Context context) {
        PrintStream o = context.out;
        o.println("// Generated by xpiler");
        o.println();
        String namespace = context.doc.namespace;
        if (StringUtil.isNullOrEmpty(namespace) == false) {
            o.format("package %s;", namespace.replace('/', '.'));
            o.println();
            o.println();
        }
        o.println("import x2.*;");
        o.println();
    }
  
    private void formatBody(Context context) {
        PrintStream o = context.out;
        o.format("public class %s {", context.doc.baseName);
        o.println();
        boolean leading = true;
        for (Definition def : context.doc.getDefinitions()) {
            if (leading) {
                leading = false;
            } else {
                o.println();
            }
            def.format(context);
        }
        o.println("}");
    }
  
    public String getDescription() { return description; }
  
    public boolean isUpToDate(String path, String outDir) {
        File source = new File(path);
        File target = new File(
            PathUtil.join(outDir, PathUtil.getBaseName(source.getName()) + extension));
        return (target.exists() && target.lastModified() >= source.lastModified());
    }

    private static class Context extends FormatterContext {
        private static Map<String, String> nativeTypes;
        private static Map<String, String> defaultValues;
    
        static {
            nativeTypes = new HashMap<String, String>();
            nativeTypes.put("bool", "boolean");
            nativeTypes.put("int8", "byte");
            nativeTypes.put("int16", "short");
            nativeTypes.put("int32", "int");
            nativeTypes.put("int64", "long");
            nativeTypes.put("string", "String");
      
            defaultValues = new HashMap<String, String>();
            defaultValues.put("bool", "false");
            defaultValues.put("int8", "0");
            defaultValues.put("int16", "0");
            defaultValues.put("int32", "0");
            defaultValues.put("int64", "0");
            defaultValues.put("string", "");
        }

        @Override
        public void formatReference(Reference reference) {
        }

        @Override
        public void formatConsts(ConstsDef def) {
            out.format("  public class %s {", def.name);
            out.println();
            for (ConstsDef.Constant constant : def.getConstants()) {
                out.format("    public static final int %s = %s;",
                    constant.name, constant.value);
                out.println();
            }
            out.println("  }");
        }

        @Override
        public void formatCell(CellDef def) {
            out.format("  public class %s ", def.name);
            if (StringUtil.isNullOrEmpty(def.base) == false) {
                out.format("extends %s", def.base);
            }
            out.println();
            out.println("    protected static Tag tag;");
            preprocessProperties(def);
            formatPropertyFields(def);
            formatProperties(def);
            formatMethods(def);
            out.println("  }");
        }

        private void formatPropertyFields(CellDef def) {
            if (def.hasProperties()) {
                out.println();
            }
            for (CellDef.Property prop : def.getProperties()) {
                out.format("    private %s %s;", prop.nativeType, prop.nativeName);
                out.println();
            }
        }
    
        private void formatProperties(CellDef def) {
            for (CellDef.Property prop : def.getProperties()) {
                out.println();
                out.format("    public %s get%s() {", prop.nativeType, prop.name);
                out.println();
                out.format("      return %s;", prop.nativeName);
                out.println();
                out.println("    }");
                out.format("    public %s set%s(%s value) {",
                    def.name, prop.name, prop.nativeType);
                out.println();
                out.format("      %s = value;", prop.nativeName);
                out.println();
                out.println("      return this;");
                out.println("    }");
            }
        }
    
        private void formatMethods(CellDef def) {
            formatConstructor(def);
            formatInitializer(def);
            formatEqualsTo(def);
            formatHashCode(def);
            formatIsEquivalend(def);
            formatTypeAccessors(def);
            formatDescribe(def);
        }
    
        private void formatConstructor(CellDef def) {
            out.println();
            out.format("    public %s() {", def.name);
            out.println();
            out.println("      init();");
            out.println("    }");
        }
    
        private void formatInitializer(CellDef def) {
            out.println();
            out.println("    private void init() {");
            for (CellDef.Property prop : def.getProperties()) {
                out.format("      %s = %s;", prop.nativeName, prop.defaultValue);
                out.println();
            }
            out.println("    }");
        }
    
        private void formatEqualsTo(CellDef def) {
            out.println();
            out.println("    @Override");
            out.println("    protected boolean equalsTo(Cell other) {");
            out.println("      if (!super.equalsTo(other)) {");
            out.println("        return false;");
            out.println("      }");
            if (def.hasProperties()) {
                out.format("      %s o = (%s)other;", def.name, def.name);
                out.println();
                for (CellDef.Property prop : def.getProperties()) {
                    out.format("      if (%s != o.%s) {", prop.nativeName, prop.nativeName);
                    out.println();
                    out.println("        return false;");
                    out.println("      }");
                }
            }
            out.println("      return true;");
            out.println("    }");
        }

        private void formatHashCode(CellDef def) {
            out.println();
            out.println("    @Override");
            out.println("    public int hashCode(Fingerprint fingerprint) {");
            if (def.hasProperties()) {
                out.println("      Hash hash = new Hash(super.hashCode(fingerprint);");
                out.println("      Fingerprint.Capo capoed = fingerprint.capo(tag.getOffset());");
                for (CellDef.Property prop : def.getProperties()) {
                    out.format("      if (capoed.get(%d)) {", prop.index);
                    out.println();
                    out.format("        hash.update(%s);", prop.nativeName);
                    out.println();
                    out.println("      }");
                }
                out.println("      return hash.code();");
            } else {
                out.println("      return super.hashCode(fingerprint);");
            }
            out.println("    }");
        }
    
        private void formatIsEquivalend(CellDef def) {
            out.println();
            out.println("    @Override");
            out.println("    protected boolean isEquivalent(Cell other) {");
            out.println("      if (!super.isEquivalent(other)) {");
            out.println("        return false;");
            out.println("      }");
            if (def.hasProperties()) {
                out.format("      %s o = (%s)other;", def.name, def.name);
                out.println();
                out.println("      Fingerprint.Capo capoed = fingerprint.capo(tag.getOffset());");
                for (CellDef.Property prop : def.getProperties()) {
                    out.format("      if (capoed.get(%d)) {", prop.index);
                    out.println();
                    out.format("        if (%s != o.%s) {", prop.nativeName, prop.nativeName);
                    out.println();
                    out.println("          return false;");
                    out.println("        }");
                    out.println("      }");
                }
            }
            out.println("      return true;");
            out.println("    }");
        }

        private void formatTypeAccessors(CellDef def) {
            out.println();
            out.println("    @Override");
            out.format("    public %s tag() { return tag; }",
                (def.isEvent() ? "Cell.Tag" : "Tag"));
            out.println();
            if (def.isEvent()) {
                out.println();
                out.println("    @Override");
                out.println("    public int typeId() { return tag.");
            }
        }
    
        private void formatDescribe(CellDef def) {
            out.println();
            out.println("    @Override");
            out.println("    protected void describe(StringBuilder sb) {");
            out.println("      super.describe(sb);");
            for (CellDef.Property prop : def.getProperties()) {
                out.print("      sb.append(\"");
                if (prop.index == 0) {
                    out.print(" ");
                } else {
                    out.print(", ");
                }
                out.print(prop.name);
                out.print(": \"");
                out.println(");");
                out.print("      sb.append(");
                out.print(prop.nativeName);
                out.println(");");
            }
            out.println("    }");
        }
    
        private static void preprocessProperties(CellDef def) {
            int index = 0;
            for (CellDef.Property prop : def.getProperties()) {
                prop.index = index++;
        
                prop.nativeName = StringUtil.firstToLower(prop.name) + "_";
                prop.name = StringUtil.firstToUpper(prop.name);
        
                if (nativeTypes.containsKey(prop.type)) {
                    prop.nativeType = nativeTypes.get(prop.type);
                } else {
                    prop.nativeType = prop.type;
                }
        
                if (defaultValues.containsKey(prop.type)) {
                    if (StringUtil.isNullOrEmpty(prop.defaultValue)) {
                        prop.defaultValue = defaultValues.get(prop.type);
                    }
                    if (prop.type == "string") {
                        prop.defaultValue = "\"" + prop.defaultValue + "\"";
                    }
                } else {
                    prop.defaultValue = "null";
                }
            }
        }
    }
}
